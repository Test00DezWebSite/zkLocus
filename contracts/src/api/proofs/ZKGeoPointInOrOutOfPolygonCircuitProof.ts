import { Field, JsonProof} from "o1js";
import { GeoPointProviderCircuit, GeoPointProviderCircuitProof } from "../../zkprogram/private/Geography";
import {GeoPointInOrOutOfPolygonCircuit, GeoPointInOrOutOfPolygonCircuitProof} from "../../zkprogram/private/GeoPointInOrOutOfPolygonCircuit";
import { IO1JSProof } from "./Types";
import { ZKLocusProof } from "./ZKLocusProof";
import { GeoPoint } from "../../model/Geography";
import { ZKGeoPoint } from "../models/ZKGeoPoint";
import CachingProofVerificationMiddleware from "./middleware/CachingProofVerificationMiddleware";
import { OracleGeoPointProviderCircuitProof} from "../../zkprogram/private/Oracle";
import { ZKOracleGeoPointProviderCircuitProof } from "./ZKOracleGeoPointProviderCircuitProof";
import { ZKGeoPointInPolygonProof } from "./ZKGeoPointInPolygonProof";
import { GeoPointInOutPolygonCommitment, GeoPointInPolygonCommitment } from "../../model/private/Commitment";

/*
* Authenticated GeoPoint source proof. This is an abstraction over the set of Zero-Knowledge proof that is used to
* prove that a GeoPoint was provided by a trusted source. It can be used to prove that a GeoPoint was provided by
* a trusted source, such as an Oracle.
*
* This class is an abstraction over the GeoPointProviderCircuitProof class, which is the actual zero-knowledge proof.
* The proof is not generated by this class, but rather passed to it in the constructor. In order to generate a proof
* from an Oracle, use the methods of ZKGeoPoint class.
*/
@CachingProofVerificationMiddleware
export class ZKGeoPointInOrOutOfPolygonCircuitProof extends ZKLocusProof<GeoPointInOrOutOfPolygonCircuitProof> {
    protected static _circuit = GeoPointInOrOutOfPolygonCircuit; 
    protected static _dependentProofs = [
        ZKGeoPointInPolygonProof,
    ]

    constructor(protected _zkGeoPoint: ZKGeoPoint, protected _proof: GeoPointInOrOutOfPolygonCircuitProof) {
        super();
    }

    static fromJSON(jsonProof: JsonProof): IO1JSProof {
        return GeoPointInOrOutOfPolygonCircuitProof.fromJSON(jsonProof);
    }

    get zkGeoPoint(): ZKGeoPoint {
        this.verify();
        return this._zkGeoPoint;
    }

    assertGeoPointIsTheClaimedOne(): void {
        const commitment: GeoPointInOutPolygonCommitment = this._proof.publicOutput;
        const commitedGeoPoint: Field = commitment.coordinatesCommitment;
        const claimedGeoPoint: GeoPoint = this._zkGeoPoint.toZKValue();
        const claimedGeoPointCommitment: Field = claimedGeoPoint.hash();

        if (!claimedGeoPointCommitment.equals(claimedGeoPointCommitment)) {
            throw new Error(`GeoPoint Commitment does not match the claimed one. Claimed: ${claimedGeoPointCommitment.toString()}. Actual: ${commitedGeoPoint.toString()}`);
        }
    }

    verify() {
        super.verify();
        this.assertGeoPointIsTheClaimedOne();
    }
   
}